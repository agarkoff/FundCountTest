package ru.fundcount.test;

import com.google.gson.Gson;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Map;

public class MainFrame {

    private static final RoundingMode ROUNDING_MODE = RoundingMode.HALF_EVEN;

    private JPanel rootPanel;
    private JTextField dateTextField;
    private JTextField amountTextField;
    private JButton calcButton;
    private JTextField resultTextField;
    private JLabel dateLabel;
    private JLabel amountLabel;
    private JLabel resultLabel;

    private OkHttpClient okHttpClient = new OkHttpClient();
    private Gson gson = new Gson();

    void start() {
        JFrame frame = new JFrame("Тестовое задание для FundCount");
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setVisible(true);
        frame.setContentPane(rootPanel);
        Dimension minimumSize = new Dimension(450, 200);
        frame.setMinimumSize(minimumSize);
        frame.setSize(minimumSize);
        frame.pack();
        {
            calcButton.addActionListener(calcButtonListener);
        }
        {
            final LocalDate now = LocalDate.now();
            dateTextField.setText(now.minusDays(30).format(DateTimeFormatter.ISO_DATE));
        }
    }

    private ActionListener calcButtonListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent actionEvent) {
            try {
                final BigDecimal amount = new BigDecimal(amountTextField.getText());
                final LocalDate buyDate = LocalDate.parse(dateTextField.getText(), DateTimeFormatter.ISO_DATE);
                final LocalDate now = LocalDate.now();
                BigDecimal buyRate = getRate(buyDate);
                BigDecimal nowRate = getRate(now);
                BigDecimal buyRub = buyRate.multiply(amount);
                BigDecimal sellRub = nowRate.multiply(amount);
                sellRub = sellRub.multiply(new BigDecimal(0.995));
                BigDecimal result = sellRub.subtract(buyRub);
                resultTextField.setText(result.setScale(2, ROUNDING_MODE).toPlainString());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };

    private BigDecimal getRate(LocalDate localDate) throws IOException {
        Request request = new Request.Builder()
                .url("http://data.fixer.io/api/" + localDate.format(DateTimeFormatter.ISO_DATE) + "?access_key=5a4436df83d6728c0750d6aaf5ea6a16&symbols=USD,RUB")
                .build();
        try (Response response = okHttpClient.newCall(request).execute()) {
            if (response.body() == null) {
                throw new RuntimeException("Ошибка при получении данных");
            }
            String string = response.body().string();
            FixerResult fixerResult = gson.fromJson(string, FixerResult.class);
            BigDecimal rub = fixerResult.rates.get("RUB");
            BigDecimal usd = fixerResult.rates.get("USD");
            return rub.divide(usd, ROUNDING_MODE);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridBagLayout());
        dateLabel = new JLabel();
        dateLabel.setText("Дата покупки (yyyy-MM-dd)");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);
        rootPanel.add(dateLabel, gbc);
        dateTextField = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        rootPanel.add(dateTextField, gbc);
        amountLabel = new JLabel();
        amountLabel.setText("Сумма в долларах");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);
        rootPanel.add(amountLabel, gbc);
        amountTextField = new JTextField();
        amountTextField.setText("100");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        rootPanel.add(amountTextField, gbc);
        calcButton = new JButton();
        calcButton.setText("Расчёт");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        rootPanel.add(calcButton, gbc);
        resultTextField = new JTextField();
        resultTextField.setEditable(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        rootPanel.add(resultTextField, gbc);
        resultLabel = new JLabel();
        resultLabel.setText("Результат");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(5, 5, 5, 5);
        rootPanel.add(resultLabel, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    @SuppressWarnings({"MismatchedQueryAndUpdateOfCollection", "unused"})
    private class FixerResult {
        private boolean success;
        private int timestamp;
        private String base;
        private String date;
        private Map<String, BigDecimal> rates;
    }
}
